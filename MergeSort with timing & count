
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;

public class MergeSort {
static int boperations = 0;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the name of the input file: ");
        String fileName = sc.nextLine();
        sc.close();
        try {
            Scanner fileScanner = new Scanner(new File(fileName));
            ArrayList<Integer> list = new ArrayList<Integer>();
            while (fileScanner.hasNextInt()) {
                int num = fileScanner.nextInt();
                list.add(num);
            }
            fileScanner.close();
            int[] arr = new int[list.size()];
            for (int i = 0; i < arr.length; i++) {
                arr[i] = list.get(i);
            }
            long startTime = System.nanoTime();
            mergesort(arr);
            long endTime = System.nanoTime();
            long total = endTime - startTime;
            System.out.println("it took " + total + " ns");
            System.out.println("Number of Operations " + boperations);
        } catch (FileNotFoundException e) {
            System.out.println("File not found: " + fileName);
        }
    }

    public static void mergesort(int[] arr) {
        mergesort(arr, 0, arr.length - 1);
    }

    public static void mergesort(int[] arr, int left, int right) {
        if (left < right) {
            int middle = (left + right) / 2;
            mergesort(arr, left, middle);
            mergesort(arr, middle + 1, right);
            merge(arr, left, middle, right);
        }
    }

    public static void merge(int[] arr, int left, int middle, int right) {
        int[] temp = new int[arr.length];
        for (int i = left; i <= right; i++) {
            temp[i] = arr[i];
            boperations++;
        }
        int i = left;
        int j = middle + 1;
        int k = left;
        while (i <= middle && j <= right) {
            boperations++;
            if (temp[i] <= temp[j]) {
                arr[k] = temp[i];
                i++;
            } else {
                arr[k] = temp[j];
                j++;
            }
            k++;
        }
        while (i <= middle) {
            arr[k] = temp[i];
            k++;
            i++;
            boperations++;
        }
    }
}
